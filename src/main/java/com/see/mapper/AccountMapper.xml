<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.see.dao.AccountMapper">

	<resultMap type="weibo" id="accountMap">
		<id column="wid" property="wid" />
		<result column="wcontent" property="wcontent" />
		<result column="aid" property="aid" />
		<result column="last_update_time" property="lastUpdateTime" />
		<result column="service" property="service" />
		<result column="imgname" property="imgname" />
		<result column="comment" property="comment" />
		<result column="liked" property="liked" />
		<association property="account" javaType="Account">
			<id column="aid" property="aid" />
			<result column="nick_name" property="nickName" />
			<result column="fans" property="fans" />
			<result column="pic" property="pic" />
		</association>
	</resultMap>
	
	   <resultMap type="Account" id="findMap">
		<id column="aid" property="aid"/>
		<result column="nick_name" property="nickName"/>
		<result column="pic" property="pic"/>
		<result column="email" property="email"/>
		<result column="password" property="password"/>
		<result column="fans" property="fans"/>
		<collection property="weibos" ofType="Weibo">
			<id column="wid" property="wid"/>
			<result column="wcontent" property="wcontent"/>
			<result column="last_update_time" property="lastUpdateTime"/>
			<result column="service" property="service"/>
			<result column="comment" property="comment"/>
			<result column="liked" property="liked"/>
			<result column="imgname" property="imgname"/>
		</collection>
	</resultMap>

		
		<resultMap type="Account" id="accountsMap">
			
			
			<id column="aid" property="aid" />
			<result column="nick_name" property="nickName" />
			<result column="fans" property="fans" />
			<result column="pic" property="pic" />
			
		</resultMap>
		
		

  <select id="findById" parameterType="int" resultMap="findMap">
     SELECT
		a.aid,
		a.nick_name,
		a.pic,
		a.fans,
		a.email,
		a.password,
		w.wid,
		w.wcontent,
		w.last_update_time,
		w.service,
		w.`comment`,
		w.liked,
		w.imgname
	FROM
		account a
		LEFT JOIN weibo w ON a.aid = w.aid 
	WHERE
		a.aid = #{id}
		ORDER BY w.last_update_time DESC
  </select>
 
  
   
  <select id="findByEmail" parameterType="String" resultType="Account">
  	SELECT
		aid,
		email,
		nick_name,
		`password`,
		pic 
	FROM
		account 
	WHERE
		email = #{email}
  </select>
  
  
  <select id="findAll" parameterType="int" resultMap="accountMap">
  	SELECT
	*
FROM
	(
		SELECT
			w.*
		FROM
			weibo w
		WHERE
			EXISTS (
				SELECT
					1
				FROM
					follow f
				WHERE
					w.aid = f.follow_aid
				AND f.aid = #{id}
			)
		OR w.aid =#{id}
	) t
  LEFT JOIN account a ON t.aid = a.aid
  ORDER BY
	t.last_update_time DESC
  </select>
  
  
  
  <select id="count" parameterType="string" resultType="int">
  	SELECT
		count( 1 ) 
	FROM
    weibo w
    LEFT JOIN account a  ON a.aid = w.aid
  	<trim prefix="WHERE" prefixOverrides="AND |OR ">
	  	<if test="value != null">
			w.wcontent LIKE CONCAT('%', #{value}, '%')	
		</if>
	</trim>
  </select>
  
  <select id="search" parameterType="SearchVO" resultMap="accountMap">
	SELECT 
		a.aid,
		a.nick_name,
		a.pic,
		w.wid,
		w.wcontent,
		w.last_update_time,
		w.service,
		w.`comment`,
		w.liked,
		w.imgname
	FROM 
		account a 
		RIGHT JOIN weibo w ON a.aid = w.aid 
	<trim prefix="WHERE" prefixOverrides="AND |OR ">
	  	<if test="q != null">
			w.wcontent LIKE CONCAT('%',#{q},'%')  
			ORDER BY w.last_update_time DESC	
		</if>
	</trim>
	LIMIT #{offset}, #{size}
  </select>
  
  
  <select id="searchuser" parameterType="string" resultMap="accountsMap">
	SELECT 
	a.aid,
	a.nick_name,
	a.pic,
	a.fans
	FROM 
		account a 
	<trim prefix="WHERE" prefixOverrides="AND |OR ">
	  	
			a.nick_name LIKE CONCAT('%', #{q}, '%')
            ORDER BY a.fans DESC
		
	</trim>
  </select>
  
  
  
  
  <insert id="insert" parameterType="Account" keyProperty="aid">
  	<selectKey order="BEFORE" keyProperty="aid" resultType="int">
  		select TIME_TO_SEC(NOW())
  	</selectKey>
  	INSERT INTO ACCOUNT(aid,email,nick_name,`password`,pic) VALUES(#{aid},#{email},#{nickName},#{password},#{pic})
  </insert>
  
  <update id="update" parameterType="Account">
  	UPDATE ACCOUNT
  	<set>
  		<if test="email != null">
  			 email=#{email}, 
  		</if>
  		<if test="nickName != null">
  			nick_name = #{nickName},
  		</if>
  		<if test="password != null">
  			`password` = #{password}, 
  		</if>
  		<if test="pic != null">
  			pic = #{pic},
  		</if>
  		<if test="fans != null">
  			fans = fans +  #{fans}
  		</if>
  	</set>
  	WHERE AID = #{aid}
  </update>
  
   <update id="updatenickName" parameterType="Account">
  	UPDATE ACCOUNT
  	<set>
  		
  		<if test="nickName != null">
  			nick_name = #{nickName},
  		</if>
  	</set>
  	WHERE AID = #{aid}
  </update>
  <update id="updateemail" parameterType="Account">
  	UPDATE ACCOUNT
  	<set>
  		
  		<if test="email != null">
  			email = #{email},
  		</if>
  	</set>
  	WHERE AID = #{aid}
  </update>
  
  <update id="updatepassword" parameterType="Account">
  	UPDATE ACCOUNT
  	<set>
  		
  		<if test="password != null">
  			password = #{password},
  		</if>
  	</set>
  	WHERE AID = #{aid}
  </update>
  <update id="updatepic" parameterType="Account">
  	UPDATE ACCOUNT
  	<set>
  		
  		<if test="pic != null">
  			pic = #{pic},
  		</if>
  	</set>
  	WHERE AID = #{aid}
  </update>
  
  
  
  <delete id="delete" parameterType="_int">
  		DELETE FROM ACCOUNT WHERE aid = #{id}
  </delete>
  
</mapper>